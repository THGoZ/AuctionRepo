@using APIService.Models
@using APIService
@using AuctionWebApp.Models.Helper

@if (ProductRowItem is not null)
{
    <tr>
        @if (!isEditMode)
        {
            <td>@ProductRowItem.Nombre</td>
            <td>@ProductRowItem.PrecioBase</td>
            <td>@ProductRowItem.Descripcion</td>
            <td>
                <a @onclick="() => isEditMode = true" href="javascript:void(0)">Edit</a>
                <a @onclick="async () => await OnDelete.InvokeAsync(ProductRowItem.IdProducto)" href="javascript:void(0)">Delete</a>
            </td>
        }
        else
        {
            <td>
                <input @bind="ProductRowItem.Nombre" class="form-control" />
            </td>
            <td>
                <input @bind="ProductRowItem.PrecioBase" class="form-control" />
            </td>
            <td>
                <input @bind="ProductRowItem.Descripcion" class="form-control" />
            </td>
            <td>
                <a @onclick="Update" href="javascript:void(0)">Save</a>
                <a @onclick="() => isEditMode = false" href="javascript:void(0)">Cancel</a>
            </td>
        }
    </tr>
}

@code {
    [Parameter]
    public ProductoAPI? ProductRowItem { get; set; }

    [Parameter]
    public EventCallback<EditProductData> OnEdit { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }

    private bool isEditMode = false;

    private async Task Update()
    {
        var editData = new EditProductData
            {
                Producto = ProductRowItem,
                Id = ProductRowItem.IdProducto,
                SubastaId = 1, // Reemplazar por el id de subasta correcto
            };

        await OnEdit.InvokeAsync(editData);
        isEditMode = false;
    }
}
