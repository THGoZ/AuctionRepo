@using APIService.Models
@using AuctionBlazorWebApp.Models.ViewModels
@using AuctionWebApi.Domain.DTO
@using BlazorBootstrap
@using APIService
@using System.Security.Claims
@implements IDisposable

@inject APIService apiClient
@inject NavigationManager navManager

<div class="card mb-4">
    <div class="d-flex p-0 card-header">
    <h3 class="p-2 mb-3 pb-md-0 px-md-2">
        Datos de ingreso
    </h3>
    </div>
    <div class="card-body">
        <div class="row pe-5 ps-3">
            <div class="wrap-form-control mt-2 mb-3 pb-1">
                <InputText id="Email" @bind-Value="UserDetail.Email" disabled placeholder="Email" class="form-control"></InputText>
                <span class="symbol-form-control">
                    <i class="fa fa-at" aria-hidden="true"></i>
                </span>
            </div>
            @if (!IsEditMode)
            {
                <div class="row align-items-center">
                    <div class="col">
                        <div class="input-group wrap-form-control mt-2 mb-3 pb-1">
                            <input id="Contrasena" type="password" disabled value="placeholderpass" placeholder="Contrasena" class="form-control"/>
                            <span class="symbol-form-control">
                                <i class="fa fa-lock" aria-hidden="true"></i>
                            </span>
                            <InputCheckbox @bind-Value="IsEditMode" class="btn-check" id="btn-check-outlined" autocomplete="off" />
                            <label class="btn btn-warning rounded-end-4" for="btn-check-outlined">
                                <i class="fa-solid fa-pen-to-square fa-lg"></i>
                            </label>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <EditForm EditContext="editContext" OnValidSubmit="UpdatePassword" FormName="NewPassForm">
                    <DataAnnotationsValidator />
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="input-group wrap-form-control mt-2 mb-3 pb-1">
                                <InputText id="Contrasena" type="password" @bind-Value="model.contrasena" placeholder="Contraseña anterior" class="form-control"></InputText>
                                <span class="symbol-form-control">
                                    <i class="fa fa-lock" aria-hidden="true"></i>
                                </span>
                                <InputCheckbox @bind-Value="IsEditMode" class="btn-check" disabled id="btn-check-outlined" autocomplete="off" />
                                <label class="btn btn-warning rounded-end-4" for="btn-check-outlined">
                                    <i class="fa-solid fa-pen-to-square fa-lg"></i>
                                </label>
                            </div>
                            <ValidationMessage For="() => model.contrasena" class="mb-2" style="color:red;"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="wrap-form-control mt-2 mb-3 pb-1">
                                <InputText id="newpassword" type="password" @bind-Value="model.newpassword" placeholder="Nueva contraseña" class="form-control"></InputText>
                                <span class="symbol-form-control">
                                    <i class="fa fa-lock" aria-hidden="true"></i>
                                </span>
                            </div>
                            <ValidationMessage For="() => model.newpassword" class="mb-2" style="color:red;"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row align-items-center">
                        <div class="col">
                            <div class="wrap-form-control mt-2 mb-3 pb-1">
                                <InputText id="confirmpassword" type="password" @bind-Value="model.confirmpassword" placeholder="Confirmar nueva contraseña" class="form-control"></InputText>
                                <span class="symbol-form-control">
                                    <i class="fa fa-lock" aria-hidden="true"></i>
                                </span>
                            </div>
                        </div>
                        <ValidationMessage For="() => model.confirmpassword" class="mb-2" style="color:red;"></ValidationMessage>
                        <div class="d-grid gap-3 d-md-flex justify-content-md-end mt-2">
                            @if (IsLoading)
                            {
                                <button class="btn btn-success rounded-pill" type="button" disabled="">
                                    <span class="spinner-border fs-4 spinner-border-sm" style="width: 1.5rem; height: 1.5rem;" aria-hidden="true"></span>
                                    <span role="status"></span>
                                </button>

                                <button class="btn btn-danger rounded-pill" type="button" disabled="">
                                    <span role="status"><i class="fa-solid fa-ban fa-2xl"></i></span>
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-success rounded-pill" type="submit">
                                    <i class="fa-regular fa-circle-check fa-2xl"></i>
                                </button>
                                <button class="btn btn-danger rounded-pill" type="button" @onclick="() => ClearForm()">
                                    <span role="status"><i class="fa-solid fa-ban fa-2xl"></i></span>
                                </button>
                            }
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public UsuarioAPI? UserDetail { get; set; }
    [SupplyParameterFromForm]
    public PasswordChangeViewModel model { get; set; } = new();
    private bool IsEditMode { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private ValidationMessageStore? messageStore;
    private EditContext? editContext;

    [Inject] protected ToastService ToastService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        editContext = new(model);
        editContext.OnValidationRequested += HandleValidationRequested;
        messageStore = new(editContext);

    }

    private void HandleValidationRequested(object? sender,
    ValidationRequestedEventArgs args)
    {
        messageStore?.Clear();

        if (model.contrasena == model.newpassword)
        {
            messageStore?.Add(() => model.newpassword, "La nueva contraseña no puede ser igual a la anterior");
        }
    }

    private async void UpdatePassword()
    {
        IsLoading = true;
        var DTO = new UserPassChangeDTO()
            {
                Contrasena = model.contrasena,
                Email = UserDetail.Email,
                NewPassword = model.newpassword
            };

        var message = await apiClient.ChangePassword(DTO);
        if (!message.IsSuccessStatusCode)
        {
            if(message.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                messageStore?.Add(() => model.contrasena, "Contraseña incorrecta!");
                IsLoading = false;
                StateHasChanged();
                return;
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, $"Error! {await message.Content.ReadAsStringAsync()}"));
                IsLoading = false;
                StateHasChanged();
                return;
            }
        }
        ToastService.Notify(new(ToastType.Success, $"Exito! Contraseña cambiada"));
        IsLoading = false;
        ClearForm();
        StateHasChanged();
    }

    public void ClearForm()
    {
        IsEditMode = false;
        model = new();
    }

    public void Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
    }
}
