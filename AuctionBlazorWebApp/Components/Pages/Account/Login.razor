@page "/login"
@page "/login/{sesion}"
@layout LoginLayout

@using AuctionAPIC.Models.APIModels
@using AuctionBlazorWebApp.Components.Layout
@using System.Security.Claims
@using AuctionBlazorWebApp.Models.ViewModels
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using APIService
@using Microsoft.AspNetCore.Components.Forms

@inject APIService apiClient
@inject NavigationManager navManager


<section class="d-flex justify-content-center align-items-center min-vh-100">
    <div class="contenedor shadow-lg p-4" style="max-width: 400px; width: 100%;">
        <div class="card">
            <EditForm Model="@model" OnValidSubmit="Authenticate" FormName="LoginForm">
                <DataAnnotationsValidator />
                <h2 class="text-center">Iniciar sesión</h2>
                <div class="form-group">
                    <InputText id="email" @bind-Value="model.Email" placeholder="Email" class="form-control"></InputText>
                    <ValidationMessage For="() => model.Email"></ValidationMessage>
                </div>
                <div class="form-group">
                    <InputText id="password" @bind-Value="model.Contrasena" placeholder="Contraseña" type="password" class="form-control"></InputText>
                    <ValidationMessage For="() => model.Contrasena"></ValidationMessage>
                </div>
                <div class="alert alert-danger mt-2" role="alert">
                    <span class="text-danger">@errormessage</span>
                </div>
                <div class="d-grid gap-2 mb-3 my-4">
                    <button type="submit" class="btn btn-primary">Ingresar</button>
                    <div class="registrar text-center">
                        <p>¿No tiene un usuario? <a href="registrar">Crear usuario</a></p>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</section>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }
    [SupplyParameterFromForm]
    public LoginViewModel model { get; set; } = new();

    private LoginDTO login = new LoginDTO();

    private string? errormessage;

    [Parameter]
    public string sesion { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (sesion is not null)
        {
            await HttpContext.SignOutAsync();
            navManager.NavigateTo("/login");
        }
    }

    private async Task Authenticate()
    {

        login.Email = model.Email;
        login.Contrasena = model.Contrasena;

        var sesionUsuario = await apiClient.ValidateUser(login);

        if (sesionUsuario is null || sesionUsuario.Wrongpassoword)
        {
            errormessage = "Nombre o contraseña incorrecta";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.NameIdentifier, sesionUsuario.IdUsuario.ToString()),
            new Claim(ClaimTypes.Name, sesionUsuario.Nombre),
            new Claim(ClaimTypes.Surname, sesionUsuario.Apellido),
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var principal = new ClaimsPrincipal(identity);
        await HttpContext.SignInAsync(principal);
        navManager.NavigateTo("/");

    }
}
