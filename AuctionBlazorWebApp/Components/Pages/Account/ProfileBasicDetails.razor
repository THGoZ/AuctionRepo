@using APIService.Models
@using AuctionBlazorWebApp.Models.ViewModels
@using BlazorBootstrap
@using APIService

@inject APIService apiClient
@inject NavigationManager navManager

    <div class="card my-4">
        <h3 class="p-2 mb-3 pb-md-0 px-md-2 card-header">Datos de usuario</h3>
        <div class="card-body">
                <EditForm Model="@model" OnValidSubmit="CreateUser" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    <div class="row pb-1 d-flex justify-content-between">
                        <div class="col-6 pe-2">
                            <div class="wrap-form-control mt-3 mb-3">
                                <InputText id="nombre" @bind-Value="model.Nombre" disabled placeholder="Nombre" class="form-control"></InputText>
                                <span class="symbol-form-control">
                                    <i class="fa fa-user-pen" aria-hidden="true"></i>
                                </span>
                            </div>
                            <ValidationMessage For="() => model.Nombre"></ValidationMessage>
                        </div>
                        <div class="col-6 pe-2">
                            <div class="wrap-form-control mt-3 mb-3">
                            <InputText id="apellido" @bind-Value="model.Apellido" disabled placeholder="Apellido" class="form-control"></InputText>
                                <span class="symbol-form-control">
                                    <i class="fa fa-user-pen" aria-hidden="true"></i>
                                </span>
                            </div>
                            <ValidationMessage For="() => model.Apellido"></ValidationMessage>
                        </div>
                    </div>
                    <div class="wrap-form-control pb-1 mb-3">
                    <InputText id="direccion" @bind-Value="model.Direccion" disabled placeholder="Direccion" class="form-control"></InputText>
                        <span class="symbol-form-control">
                            <i class="fa fa-map-location-dot"></i>
                        </span>
                    </div>
                    <ValidationMessage For="() => model.Direccion"></ValidationMessage>

                    <div class="wrap-form-control mt-2 mb-3 pb-1">
                    <InputText id="Ciudad" @bind-Value="model.Ciudad" disabled placeholder="Ciudad" class="form-control"></InputText>
                        <span class="symbol-form-control">
                            <i class="fa fa-map" aria-hidden="true"></i>
                        </span>
                    </div>
                    <ValidationMessage For="() => model.Ciudad"></ValidationMessage>

                    <div class="alert alert-danger mb-3 mt-3 px-2 rounded-5" role="alert" hidden="@string.IsNullOrEmpty(emailerror)">
                        <span class="text-danger">@emailerror</span>
                    </div>

                    <label>Ingrese su cuil</label>
                    <div class="row row-cols-5 align-items-center text-center">
                        <div class="col-2">
                            <div class="wrap-form-control mt-3 mb-3">
                            <NumberInput @bind-Value="model.Cuil1" disabled EnableMinMax="true" TValue="int" id="Cuil1" Placeholder="Ej: 20" Max="99" Min="1" class="form-control cuil"></NumberInput>
                            </div>
                        </div>
                        <div class="col-md-auto px-1">
                            <p class="fs-1">-</p>
                        </div>
                        <div class="col-3">
                            <div class="wrap-form-control mt-3 mb-3">
                            <NumberInput @bind-Value="model.Cuil2" disabled EnableMinMax="true" TValue="int" id="Cuil2" Placeholder="Ej: 43654983" Max="99999999" Min="1" class="form-control cuil"></NumberInput>
                            </div>
                        </div>
                        <div class="col-md-auto px-1">
                            <p class="fs-1">-</p>
                        </div>
                        <div class="col-2">
                            <div class="wrap-form-control mt-3 mb-3">
                            <NumberInput @bind-Value="model.Cuil3" disabled EnableMinMax="true" TValue="int" id="Cuil3" Placeholder="Ej: 7" Max="9" Min="1" class="form-control cuil"></NumberInput>
                            </div>
                        </div>
                    </div>
                    <div class="row row-cols-5 align-items-center text-center">
                        <div class="col-2">
                            <ValidationMessage For="() => model.Cuil1"></ValidationMessage>
                        </div>
                        <div class="col-md-auto px-1">
                        </div>
                        <div class="col-3">
                            <ValidationMessage For="() => model.Cuil2"></ValidationMessage>
                        </div>
                        <div class="col-md-auto px-1">
                        </div>
                        <div class="col-2">
                            <ValidationMessage For="() => model.Cuil3"></ValidationMessage>
                        </div>
                    </div>
                    <div class="container gap-3 d-flex justify-content-center">
                        <button type="submit" class="btn btn-primary rounded-4 px-4 py-2 mb-1 mt-4">Registrar</button>
                    </div>
                    </EditForm>
        </div>
    </div>
@code {

    [SupplyParameterFromForm]
    public RegistroViewModel model { get; set; } = new();
    public int Cuil1 { get; set; }
    public int Cuil2 { get; set; }
    public int Cuil3 { get; set; }
    private string? Confirmpass { get; set; }
    private string? passworderror { get; set; }
    private string? emailerror { get; set; }
    [Inject] protected ToastService ToastService { get; set; }


    public async Task CreateUser()
    {

        emailerror = null;
        passworderror = null;

        if (Confirmpass != model.Contrasena)
        {
            passworderror = "Las contraseñas no coinciden!";
            return;
        }
        var newuser = new UsuarioAPI
            {
                Nombre = model.Nombre,
                Apellido = model.Apellido,
                Direccion = model.Direccion,
                Ciudad = model.Ciudad,
                Email = model.Email,
                Contrasena = model.Contrasena,
                Cuil = $"{model.Cuil1}-{model.Cuil2}-{model.Cuil3}"
            };

        var response = await apiClient.CreateUsuario(newuser);

        if (response is not null)
        {
            if (response != "Usuario creado exitosamente!")
            {
                emailerror = response;
                ToastService.Notify(new(ToastType.Danger, $"Error! {response}"));
                return;
            }
            ToastService.Notify(new(ToastType.Success, $"Exito! {response}"));
            await Task.Delay(2000);
        }
        else
        {
            ToastService.Notify(new(ToastType.Danger, $"Error! {response}"));
        }

        navManager.NavigateTo("/login", true);
    }

}
