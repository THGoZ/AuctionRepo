@page "/products/{auction}/{productcount}"
@page "/products/{productcount}"

@using APIService.Models
@using APIService
@using System.Security.Claims
@using AuctionBlazorWebApp.Models.Helper
@using AuctionBlazorWebApp.Models.ViewModels
@using AuctionBlazorWebApp.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JSRuntime
@inject APIService apiClient
@attribute [Authorize]

<div class="container-fluid justify-content-center">
@if (auction != null)
{
    <PageTitle>Subasta N°@auction</PageTitle>
        <div class="p-2 rounded bg-body-tertiary my-5 text-center">
            <h1>Productos de subasta N°@auction</h1>
            @if (subasta != null){
            <p class="text-body-tertiary">@subasta.Descripcion</p>
            }
        </div>
}
else
{
    <PageTitle>Productos</PageTitle>
        <div class="p-3 rounded bg-body-tertiary my-5 text-center">
            <h1>Productos disponibles</h1>
        </div>
}
    <div class="d-flex justify-content-end mx-5">
        <div class="dropdown m-2 focus-ring-secondary">
            <button class=" btn dropdown-toggle text-start text-md-start border border-warning rounded-2 focus-ring-warning" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="--bs-btn-padding-x:1rem;">
                <i class="fa-solid fa-filter fa-2x mx-1" style="color: #FFD43B;"></i> Filtrar
            </button>
            <div class="dropdown-menu px-3" style="">
                <h6 class="dropdown-header text-warning-emphasis">Filtrar productos</h6>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                    <label class="form-check-label" for="flexRadioDefault1">
                        Con ofertas
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Sin ofertas
                    </label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                    <label class="form-check-label" for="flexRadioDefault2">
                        Todos
                    </label>
                </div>
            </div>
        </div>
        <div class="dropdown m-2">
            <button class="btn dropdown-toggle text-start text-md-start border border-warning rounded-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fa-solid fa-sort fa-2x mx-1" style="color: #FFD43B;"></i> Ordenar
            </button>
            <div class="dropdown-menu" style="">
                <h6 class="dropdown-header">Ordenar por</h6>
                <a class="dropdown-item"><i class="fa-solid fa-sort mx-2" style="color: #FFD43B;"></i>Precio</a>
                <a class="dropdown-item"><i class="fa-solid fa-sort mx-2" style="color: #FFD43B;"></i>Cantidad de ofertas</a>
                <a class="dropdown-item"><i class="fa-solid fa-sort mx-2" style="color: #FFD43B;"></i>Nombre</a>
            </div>
        </div>
    </div>
    <div class="row">
        @if (products == null)
        {
            for (int i = 0; i < int.Parse(productcount); i++)
            {
                <div class="col-md-3 gap-5 mb-3 mt-3 container-lg">
                    <div class="col shadow-lg rounded-top-3">
                        <div class="card-sl">
                            <div class="image-container">
                                <div class="first">
                                    <div class="d-flex justify-content-end align-items-end">
                                        <span class="wishlist text-light pull-right placeholder-glow" disabled data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="Cantida de ofertas"></span>
                                    </div>
                                </div>
                                <img src="placeholder.jpg" class="img-fluid rounded-top-3 card-img-top img-fit" alt="Producto Image" />
                            </div>
                        </div>
                        <div class="card-heading bg-body-secondary">
                            <span class="placeholder col-6 mx-2 mt-2 mb-3"></span>
                        </div>
                        <div class="card-text text-body-tertiary bg-body-secondary px-2">
                            <span class="placeholder place col-7"></span>
                            <span class="placeholder-glow col-4"></span>
                            <span class="mx-1 placeholder col-4"></span>
                        </div>
                        <div class="card-text text-success bg-body-secondary py-2">
                            <span class="mx-2 placeholder col-6"></span>
                        </div>
                    </div>
                    <div class="rounded-bottom-3 text-center bg-body-tertiary shadow">
                        <span class="py-3 card-button disabled placeholder placeholder-lg bg-warning col-12 text-decoration-none fw-bold"></span>
                    </div>
                </div>
            }
        }
        else if (products?.Any() ?? false)
        {
            @foreach (var product in products)
            {
                <ProductRowItemComponent ProductRowItem="product"
                                         OnEdit="EditProduct"
                                         OnDelete="DeleteProduct"
                                         ShowOnly="@(auction == null)"
                                         ShowUserProducts="@(auction == "65534")"
                                         IdUsuario="UserId"
                                         UpdateProduct="LoadProducts" />


            }
        }
        else
        {
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-6 fw-bold text-nowrap text-body-tertiary">-<span class="text-wrap">No hay productos disponibles para mostrar</span>-</h1>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string auction { get; set; }
    [Parameter]
    public string productcount { get; set; }
    private string Name;
    private int UserId;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<ProductoAPI>? products;
    private ProductoViewModel addProductModel = new();
    public string FileType { get; set; } = "";
    const int MAX_FILESIZE = 5000 * 1024;
    public string ErrorMessage { get; set; } = "";
    public byte[] imageData { get; set; } = null;
    private bool showOnly;
    private SubastaAPI? subasta = new();


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authenticationState = await authenticationStateTask;
        Name = authenticationState.User.Identity.Name;
        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        UserId = int.Parse(userIdClaim.Value);
        if (auction != null)
        {
            await ObtainSubasta(int.Parse(auction));
        }
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        if (auction is not null && auction != "65534")
        {
            products = await apiClient.GetProductsEnabledOfAuctionWithOferta(int.Parse(auction));
        }
        else
        {
            var all = await apiClient.GetAllowedProductsWithOfertas();
            if(all is not null)
                products = all.Where(p => p.Status != "sold" && p.Status != "notsold").ToList();
        }
    }

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        try
        {
            if (browserFile != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                    await fileStream.CopyToAsync(memoryStream);
                    imageData = memoryStream.ToArray();
                    FileType = Path.GetExtension(browserFile.Name);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task AddProduct()
    {
        int subastaid = int.Parse(auction);
        var authenticationState = await authenticationStateTask;

        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        int userId = int.Parse(userIdClaim.Value);

        var newproducto = new ProductoAPI
            {
                Nombre = addProductModel.Nombre,
                PrecioBase = addProductModel.PrecioBase,
                Descripcion = addProductModel.Descripcion,
                Imagen = imageData,
                ImageExtension = FileType,
                FechaSolicitud = DateTime.Now,
                EstadoDeSolicitud = false


            };

        await apiClient.SaveProduct(newproducto, userId, subastaid);
        await LoadProducts();
        addProductModel = new();
    }
    private async Task EditProduct(EditProductData editData)//quitar id subasta
    {
        await apiClient.UpdateProducto(editData.Producto, editData.Id, int.Parse(auction));
        await LoadProducts();
    }

    private async Task DeleteProduct(int id)
    {
        await apiClient.DeleteProducto(id);
        await LoadProducts();
    }

    protected override void OnParametersSet()
    {
        showOnly = auction != null;
    }

    private async Task ObtainSubasta(int id)
    {
        subasta = await apiClient.GetAuction(id);
    }
}