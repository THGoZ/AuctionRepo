@page "/products/{auction}"
@page "/products"

@using APIService.Models
@using APIService
@using System.Security.Claims
@using AuctionBlazorWebApp.Models.Helper
@using AuctionBlazorWebApp.Models.ViewModels
@using AuctionBlazorWebApp.Components
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject APIService apiClient
@attribute [Authorize]


<PageTitle>Home</PageTitle>
<div class="container">
    <div class="row g-3">
    @* @if (auction is not null)
    {
        <h1>Productos en subasta Nro @auction</h1>
    }
    else
    {
        <h1>Mostrando todos los productos</h1>
    }
    <div class="card-body p-0">
        <table class="table table-striped mb-0">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Description</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @if (auction is not null)
                {
                    <tr>
                        <th>
                            <EditForm Model="@addProductModel" OnValidSubmit="AddProduct">
                                <DataAnnotationsValidator />
                                <td>
                                    <InputText @bind-Value="addProductModel.Nombre" class="form-control" placeholder="Nombre"></InputText>
                                    <ValidationMessage For="() => addProductModel.Nombre"></ValidationMessage>
                                </td>
                                <td>
                                    <InputNumber @bind-Value="addProductModel.PrecioBase" class="form-control" placeholder="Precio"></InputNumber>
                                    <ValidationMessage For="() => addProductModel.PrecioBase"></ValidationMessage>
                                </td>
                                <td>
                                    <InputText @bind-Value="addProductModel.Descripcion" class="form-control" placeholder="Descripcion"></InputText>
                                    <ValidationMessage For="() => addProductModel.Descripcion"></ValidationMessage>
                                </td>
                                <td>
                                    <InputFile accept="image/*" OnChange="FileUploaded"></InputFile>
                                </td>
                                <td>
                                    <button type="submit" class="btn btn-loco">Save</button>
                                </td>
                            </EditForm>
                        </th>
                    </tr>
                } *@
                @if (products?.Any() ?? false)
                {
            @foreach (var product in products)
                    {
                        <ProductRowItemComponent ProductRowItem="product"
                                                 OnEdit="EditProduct"
                                                 OnDelete="DeleteProduct"
                                                 ShowOnly="@(auction == null)"
                                         ShowUserProducts="@(auction == "65534")"
                                                 IdUsuario="UserId"
                                                 UpdateProduct="LoadProducts" />


                    }
                }
                else
                {
            <div class="px-4 py-5 my-5 text-center">
                <h1 class="display-6 fw-bold text-nowrap text-body-tertiary">-<span class="text-wrap">No hay productos disponibles para mostrar en esta subasta</span>-</h1>
                    </div>
                }
                </div>
                </div>
@*             </tbody>
        </table>
    </div>
</div> *@

@code {
    [Parameter]
    public string auction { get; set; }
    private string Name;
    private int UserId;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private List<ProductoAPI>? products;
    private ProductoViewModel addProductModel = new();
    public string FileName { get; set; } = "";
    public long Filesize { get; set; }
    public string FileType { get; set; } = "";
    public DateTimeOffset Lastmodofied { get; set; }
    const int MAX_FILESIZE = 5000 * 1024;
    public string ErrorMessage { get; set; } = "";
    public byte[] imageData { get; set; } = null;
    private bool showOnly;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authenticationState = await authenticationStateTask;
        Name = authenticationState.User.Identity.Name;
        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        UserId = int.Parse(userIdClaim.Value);
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        if (auction is not null && auction != "65534")
        {
            products = await apiClient.GetProductsOfAuctionWithOferta(int.Parse(auction));
        }
        else
        {
            products = await apiClient.GetProductsWithOfertas();
        }
    }

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        try
        {
            if (browserFile != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                    await fileStream.CopyToAsync(memoryStream);
                    imageData = memoryStream.ToArray();
                    FileType = Path.GetExtension(browserFile.Name);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private async Task AddProduct()
    {
        int subastaid = int.Parse(auction);
        var authenticationState = await authenticationStateTask;

        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        int userId = int.Parse(userIdClaim.Value);

        var newproducto = new ProductoAPI
            {
                Nombre = addProductModel.Nombre,
                PrecioBase = addProductModel.PrecioBase,
                Descripcion = addProductModel.Descripcion,
                Imagen = imageData,
                ImageExtension = FileType,
                FechaSolicitud = DateTime.Now,
                EstadoDeSolicitud = false


            };

        await apiClient.SaveProduct(newproducto, userId, subastaid);
        await LoadProducts();
        addProductModel = new();
    }
    private async Task EditProduct(EditProductData editData)//quitar id subasta
    {
        await apiClient.UpdateProducto(editData.Producto, editData.Id, int.Parse(auction));
        await LoadProducts();
    }

    private async Task DeleteProduct(int id)
    {
        await apiClient.DeleteProducto(id);
        await LoadProducts();
    }

    protected override void OnParametersSet()
    {
        showOnly = auction != null;
    }
}