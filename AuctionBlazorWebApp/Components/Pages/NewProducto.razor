@page "/newProducto/{auction}"

@using APIService.Models
@using AuctionBlazorWebApp.Models.ViewModels
@using System.Security.Claims
@using APIService

@inject APIService apiClient
@inject NavigationManager navManager

<div class="card">
    <div class="card-header justify-content-center">
        Agregar nuevo producto
    </div>
    <div class="card-body">
        <h5 class="card-title m-2">Ingrese los datos del producto</h5>
        <EditForm Model="@addProductModel" OnValidSubmit="AddProduct">
            <DataAnnotationsValidator />
            <div class="row g-3 align-items-center mt-2 mb-1">
                <div class="row">
                    <label for="inputPassword6" class="col-form-label">Nombre del producto</label>
                </div>
                <div class="col-auto mt-1 mb-2">
                    <InputText @bind-Value="addProductModel.Nombre" class="form-control" placeholder="Nombre"></InputText>
                    <ValidationMessage For="() => addProductModel.Nombre"></ValidationMessage>
                </div>
                <div class="col-auto mt-1 mb-2">
                    <span id="passwordHelpInline" class="form-text">
                        Debe tener por lo menos 8 caracteres.
                    </span>
                </div>
            </div>
            <div class="row g-3 align-items-center mt-2 mb-1">
                <div class="row">
                    <label for="inputPassword6" class="col-form-label">Descripcion</label>
                </div>
                <div class="mb-2 m-0 row">
                    <InputText @bind-Value="addProductModel.Descripcion" class="form-control" placeholder="Descripcion" rows="3"></InputText>
                    <ValidationMessage For="() => addProductModel.Descripcion"></ValidationMessage>
                </div>
                <div id="descriptionHelpBlock" class=" mt-2 mb-2 form-text">
                    Describe las caracteristicas del producto, debe contener por lo menos 12 caracteres.
                </div>
            </div>
            <div class="row g-3 mt-2 mb-1 align-items-center">
                <div class="col-auto m-2 mb-2">
                    <label for="inputPassword6" class="col-form-label">Precio base</label>
                </div>
                <div class="col-auto mt-1 mt-2">
                    <div class="input-group mb-3">
                        <span class="input-group-text text-success">$</span>
                        <InputNumber @bind-Value="addProductModel.PrecioBase" class="form-control" placeholder="Precio"></InputNumber>
                        <span class="input-group-text">.00</span>
                    </div>
                </div>
                <div class="col-auto m-2 mt-2 mb-1">
                    <ValidationMessage For="() => addProductModel.PrecioBase"></ValidationMessage>
                </div>
            </div>
            <div class="row g-3 align-items-center mt-2 mb-1">
                <div class="row m-2 mt-1 mb-2">
                    <img src="@GetPreviewImage()" class="img-thumbnail rounded mx-auto d-block" style="width:300px" alt="https://www.svgrepo.com/show/508699/landscape-placeholder.svg" />
                </div>
                <div class="row m-2 mt-1 mb-2">
                    <label class="btn btn-outline-secondary">
                        Subir imagen
                        <InputFile hidden accept="image/*" OnChange="FileUploaded"></InputFile>
                    </label>
                </div>
            </div>
            <div class="d-grid gap-2 d-md-flex justify-content-center">
                <button type="submit" class="btn btn-primary">Save</button>
                <a href="" class="btn btn-primary">Cancel</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string auction { get; set; }
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private ProductoViewModel addProductModel = new();
    const int MAX_FILESIZE = 5000 * 1024;
    public string ErrorMessage { get; set; } = "";
    public byte[] imageData { get; set; } = null;
    public string FileType { get; set; } = "";

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        try
        {

            if (browserFile != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                    await fileStream.CopyToAsync(memoryStream);
                    imageData = memoryStream.ToArray();
                    FileType = Path.GetExtension(browserFile.Name);
                }
                GetPreviewImage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    private string? GetPreviewImage()//para cargar en edicion al subir imagen nueva
    {
        if (imageData != null && FileType != null)
            return $"data:image/{FileType.Trim('.')};base64,{Convert.ToBase64String(imageData)}";
        else if (addProductModel?.Imagen != null && !string.IsNullOrEmpty(addProductModel.ImageExtension))
            return $"data:image/{addProductModel.ImageExtension.Trim('.')};base64,{Convert.ToBase64String(addProductModel.Imagen)}";
        else
            return "https://www.svgrepo.com/show/508699/landscape-placeholder.svg";
    }

    private async Task AddProduct()
    {
        int subastaid = int.Parse(auction);
        var authenticationState = await authenticationStateTask;

        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        int userId = int.Parse(userIdClaim.Value);

        var newproducto = new ProductoAPI
            {
                Nombre = addProductModel.Nombre,
                PrecioBase = addProductModel.PrecioBase,
                Descripcion = addProductModel.Descripcion,
                Imagen = imageData,
                ImageExtension = FileType,
                FechaSolicitud = DateTime.Now,
                EstadoDeSolicitud = false


            };

        await apiClient.SaveProduct(newproducto, userId, subastaid);
        navManager.NavigateTo("/", true);
    }
}
