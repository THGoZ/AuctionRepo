@page "/userProducts"
@using APIService.Models
@using APIService
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.QuickGrid

@inject APIService apiClient
@inject NavigationManager navManager
@inject IJSRuntime js
@attribute [Authorize]

<PageTitle>Mis productos</PageTitle>

<h2>Mis productos</h2>

<div class="container-fluid table-responsive px-1">
    @if (itemsQueryable != null)
    {
        @if (itemsQueryable.Count() != 0)
        {
            <div class="d-flex float-end mx-1">
                <div class="dropdown mx-4 mt-1 mb-3 shadow">
                    <button class="btn dropdown-toggle text-start text-md-start bg-body-tertiary  rounded-2 focus-ring-warning" type="button" data-bs-toggle="dropdown" aria-expanded="false" style="--bs-btn-padding-x:1rem;">
                        <i class="fa-solid fa-filter fa-2x mx-1" style="color: #FFD43B;"></i> Filtrar
                    </button>
                    <div class="dropdown-menu px-3" style="">
                        <h6 class="dropdown-header text-warning-emphasis">Filtrar productos</h6>
                        <div class="form-check">
                            <input class="form-check-input" @onchange="@(() => selectedOption = "going")" type="radio" name="flexRadioDefault" id="flexRadioDefault1">
                            <label class="form-check-label" for="flexRadioDefault1">
                                En subasta
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" @onchange="@(() => selectedOption = "notsold")" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                            <label class="form-check-label" for="flexRadioDefault2">
                                No vendidas
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" @onchange="@(() => selectedOption = "sold")" type="radio" name="flexRadioDefault" id="flexRadioDefault2">
                            <label class="form-check-label" for="flexRadioDefault2">
                                Vendidas
                            </label>
                        </div>
                        <div class="form-check">
                            <input class="form-check-input" @onchange="@(() => selectedOption = "defak")" type="radio" name="flexRadioDefault" id="flexRadioDefault2" checked>
                            <label class="form-check-label" for="flexRadioDefault2">
                                Todos
                            </label>
                        </div>
                    </div>
                </div>
                <div class="input-group mt-1 mb-3">
                    <span class="input-group-text border-0 bg-body-tertiary" id="basic-addon1"><i class="fa-solid fa-magnifying-glass"></i></span>
                    <div class="form-floating">
                        <input type="search" class="form-control rounded-end-2" id="floatingInput" autofocus @bind="search" @bind:event="oninput" placeholder="Buscar..." />
                        <label for="floatingInput">Buscar</label>
                    </div>
                </div>
            </div>
        }
    }
    @if (itemsQueryable == null)
    {
        <div class="row px-lg-5 p-5">
            <div class="d-flex justify-content-center">
                <div class="spinner-grow text-primary mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-secondary mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-success mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-danger mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-warning mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-info mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-light mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <div class="spinner-grow text-dark mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        </div>
    }
    else if (itemsQueryable.Count() != 0)
    {
                <QuickGrid Class="table table-striped table-hover mb-2 shadow border border-2"
                           Items="@Filteredproductos"
                           ItemKey="@(x=> x.IdProducto)"
                           Pagination="@pagination">
                    <TemplateColumn Title="Imagen">
                        <img src="@GetPreviewImage(context)" class="img-fluid rounded-3 card-img-top img-fit" style="min-height: 128px" alt="Producto Image" />
                    </TemplateColumn>
                    <PropertyColumn Title="NOMBRE"
                                    Property="@(x=> x.Nombre)"
                                    Class="text-center align-middle"
                                    Sortable="true" />
                    <TemplateColumn Title="Descripcion">
                        <ChildContent>
                            <div class="overflow-auto" style="width:16rem; max-height:6rem;"><p class="text-body-tertiary">@context.Descripcion</p></div>
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Title="Fecha de solicitud"
                                    Class="text-success-emphasis text-nowrap text-center align-middle"
                                    Property="@(x=> x.FechaSolicitud)"
                                    Format="dd-MM-yyy"
                                    Sortable="true" />
                    <TemplateColumn Title="Estado de solicitud"
                                    Class="text-center align-middle">
                        <ChildContent>
                            @if (context.EstadoDeSolicitud is null)
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-info text-info">Pendiente</span></h4>
                                <span class="d-inline-block" tabindex="0" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Todavia no fue aceptado en la subasta">
                                    <button class="btn btn-outline-warning btn-sm" disabled>Ver en subasta N°@context.IdSubasta</button>
                                </span>
                            }
                            else if (!(bool)context.EstadoDeSolicitud)
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-danger text-danger-emphasis">Rechazado</span></h4>

                            }
                            else
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-warning text-warning-emphasis">Aprobado</span></h4>
                                @if (context.Status == "sold" || context.Status == "notsold")
                                {
                                    <button class="btn btn-sm btn-warning my-3" @onclick="NavToRestult">Ver resultado de subasta</button>
                                }
                                else
                                {
                                    <button class="btn btn-sm btn-warning my-3" @onclick="()=> NavtoSubasta(context.IdSubasta)">Ver en subasta N°@context.IdSubasta</button>
                                }
                            }
                        </ChildContent>
                    </TemplateColumn>
                    <PropertyColumn Title="Cantidad de ofertas"
                                    Class="text-success-emphasis text-nowrap text-center align-middle"
                                    Property="@(x=> x.CantidadDeOfertas)"
                                    Sortable="true" />
                    <PropertyColumn Title="PRECIO BASE"
                                    Class="text-success-emphasis text-nowrap text-center align-middle"
                                    Property="@(x=> x.PrecioBase)"
                                    Format="C"
                                    Sortable="true" />
                    <PropertyColumn Class="text-success text-nowrap text-center align-middle"
                                    Title="Maxima oferta"
                                    Property="@(x=> x.OfertaMasAlta)"
                                    Format="C"
                                    Sortable="true" />
                    <TemplateColumn Title="ESTADO"
                                    Class="text-center align-middle">
                        <ChildContent>
                            @if (context.Status == "sold")
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-success text-succss-emphasis">Vendido</span></h4>
                                <button class="btn btn-sm btn-warning my-3" data-bs-toggle="modal" data-bs-target="#detailmodal-@context.IdProducto">Ver detalles de venta</button>
                                <!--Modal details-->
                        <div class="modal fade" id="detailmodal-@context.IdProducto" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header bg-warning">
                                        <h1 class="modal-title fs-3" id="exampleModalLabel">Detalles de venta</h1>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body">
                                        <DetallesDeVenta IdProducto="context.IdProducto" />
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--End modal-->
                            }
                            else if (context.Status == "ongoing")
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-info text-info-emphasis">En subasta</span></h4>
                            }
                            else if (context.Status == "notsold")
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-danger text-danger-emphasis">No se vendio</span></h4>
                            }
                            else
                            {
                                <h4><span class="p-2 badge rounded-2 border border-3 border-info text-info-emphasis">En subasta</span></h4>
                            }
                        </ChildContent>
                    </TemplateColumn>
                </QuickGrid>
        <Paginator State="@pagination" />
    }
    else
    {
        <h1 class="text-body-tertiary text-center p-5">No hay productos</h1>
    }
</div>


@code {
    private List<ProductoAPI>? products;
    PaginationState pagination = new PaginationState { ItemsPerPage = 4 };
    private int UserId;
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string? search;
    private string selectedOption = "Subasta"; // Default option can be set here
    IQueryable<ProductoAPI>? itemsQueryable;


    IQueryable<ProductoAPI>? Filteredproductos
    {
        get
        {
            var result = itemsQueryable;

            if (!string.IsNullOrEmpty(search))
            {
                result = itemsQueryable.Where(c => c.Nombre.Contains(search, StringComparison.OrdinalIgnoreCase));
            }
            if (selectedOption != "Subasta")
            {
                switch (selectedOption)
                {
                    case "going":
                        result = itemsQueryable.Where(c => c.Status == "ongoing" || c.Status == "ongoingnotsold");
                        break;
                    case "notsold":
                        result = itemsQueryable.Where(c => c.Status == "notsold");
                        break;
                    case "sold":
                        result = itemsQueryable.Where(c => c.Status == "sold");
                        break;
                    default:
                        break;


                }
            }

            return result;
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authenticationState = await authenticationStateTask;
        var user = authenticationState.User;
        var userIdClaim = user.FindFirst(c => c.Type == "nameid" || c.Type == ClaimTypes.NameIdentifier);
        UserId = int.Parse(userIdClaim.Value);
        await LoadProducts();
    }

    private string? GetPreviewImage(ProductoAPI product)//para cargar en edicion al subir imagen nueva
    {
        if (product?.Imagen != null && !string.IsNullOrEmpty(product.ImageExtension))
            return $"data:image/{product.ImageExtension.Trim('.')};base64,{Convert.ToBase64String(product.Imagen)}";
        else
            return "placeholder.jpg";
    }

    private async Task LoadProducts()
    {
        products = await apiClient.GetProductsOfUser(UserId);
        itemsQueryable = products.AsQueryable();
    
    }

    private void NavToRestult()
    {
        navManager.NavigateTo("/closed", true);
    }

    private async void NavtoSubasta(int? auctionid)
    {
        int id = auctionid ?? 1;
        var productocount = await apiClient.GetProductoCountOfAuction(id);
        navManager.NavigateTo($"/products/{auctionid}/{productocount}", true);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await js.InvokeVoidAsync("initializeTooltips");
    }

}
