@using APIService.Models
@using APIService
@using AuctionBlazorWebApp.Models.Helper
@using AuctionBlazorWebApp.Models.ViewModels
@inject APIService apiClient
@inject IJSRuntime JS


@if (ProductRowItem is not null)
{
            <div class="col-md-4 col-6 ">
                <div class="card shadow p-3 mb-5 bg-body-tertiary rounded">
                    @if (ProductRowItem.Imagen is not null)
                    {
                            <img src="@LoadImage()" class="card-img-top img-fit" alt="Producto Image" />
                    }
                    else
                    {
                        <img src="https://www.svgrepo.com/show/508699/landscape-placeholder.svg" class="card-img-top img-fit" alt="Producto Image" />
                    }
                    <div class="card-body">
                        <h5 class="strong card-title">@ProductRowItem.Nombre</h5>
                        <p class="card-subtitle">@ProductRowItem.Descripcion</p>
                        <p class="card-text text-success lead">$@ProductRowItem.PrecioBase</p>
                        <div class="text-end">
                                                @if (!HasMadeOferta)
                    {
                        <button class="btn btn-primary" @onclick="ShowModal">Make offer</button>
                        <OfertaModal IsVisible="@isModalVisible" Title="@ProductRowItem.Nombre" OnSave="SaveChanges" OnClose="CloseModal" Minimun="@ProductRowItem.PrecioBase">
                        <p>La oferta debe superar @ProductRowItem.PrecioBase </p>
                        </OfertaModal>
                    }
                    else
                    {
                         <Tooltip Class="d-inline-block" Title="Ya realizo una oferta a este producto"role="button">
                        <button class="btn btn-primary" type="button" disabled>Make offer</button>
                        </Tooltip>

                    }
                        </div>
                    </div>
                </div>

            </div>




@*     <tr>
        @if (!isEditMode)
        {
            <td>@ProductRowItem.Nombre</td>
            <td>@ProductRowItem.PrecioBase</td>
            <td>@ProductRowItem.Descripcion</td>
            @if (ProductRowItem.Imagen is not null)
            {
                <td>
                    <img src="@LoadImage()" style="width: 100px" alt="Producto Image" />
                </td>
            }
            else
            {
                <td>No image available.                </td>
            }
            @if (!ShowOnly)
            {
                <td>
                    <a @onclick="() => isEditMode = true" href="javascript:void(0)">Edit</a>
                    <a @onclick="async () => await OnDelete.InvokeAsync(ProductRowItem.IdProducto)" href="javascript:void(0)">Delete</a>
                    @if (!HasMadeOferta)
                    {
                        <button class="btn btn-primary" @onclick="ShowModal">Make offer</button>
                        <OfertaModal IsVisible="@isModalVisible" Title="@ProductRowItem.Nombre" OnSave="SaveChanges" OnClose="CloseModal" Minimun="@ProductRowItem.PrecioBase">
                        <p>La oferta debe superar @ProductRowItem.PrecioBase </p>
                        </OfertaModal>
                    }
                    else
                    {
                         <Tooltip Class="d-inline-block" Title="Ya realizo una oferta a este producto"role="button">
                        <button class="btn btn-primary" type="button" disabled>Make offer</button>
                        </Tooltip>

                    }
                </td>
            }
        }
        else
        {
            <td>
                <input @bind="ProductRowItem.Nombre" class="form-control" />
            </td>
            <td>
                <input @bind="ProductRowItem.PrecioBase" class="form-control" />
            </td>
            <td>
                <input @bind="ProductRowItem.Descripcion" class="form-control" />
            </td>
            <td>
                <img src="@GetPreviewImage()" style="width: 100px" alt="Producto Image" />
                <InputFile OnChange="FileUploaded"></InputFile>
            </td>
            <td>
                <a @onclick="Update" href="javascript:void(0)">Save</a>
                <a @onclick="() => isEditMode = false" href="javascript:void(0)">Cancel</a>
            </td>
        }
    </tr>
} *@
}



@code {
    [Parameter]
    public ProductoAPI? ProductRowItem { get; set; }

    [Parameter]
    public EventCallback<EditProductData> OnEdit { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }
    [Parameter]
    public EventCallback UpdateProduct{ get; set; }

    [Parameter]
    public bool ShowOnly { get; set; }

    [Parameter]
    public int IdUsuario { get; set; }

    private bool isEditMode = false;
    private bool isMakeOferta = false;
    private bool HasMadeOferta;

    public byte[] imageData { get; set; } = null;
    public string FileType { get; set; } = "";
    const int MAX_FILESIZE = 5000 * 1024;
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        HasMadeOferta = await CheckOfertas();
    }


    private string? GetPreviewImage()//para cargar en edicion al subir imagen nueva
    {
        if (imageData != null && FileType != null)
            return $"data:image/{FileType.Trim('.')};base64,{Convert.ToBase64String(imageData)}";
        else if (ProductRowItem?.Imagen != null && !string.IsNullOrEmpty(ProductRowItem.ImageExtension))
            return $"data:image/{ProductRowItem.ImageExtension.Trim('.')};base64,{Convert.ToBase64String(ProductRowItem.Imagen)}";
        else
            return null;
    }

    private string? LoadImage()//para cargar en lista
    {

        if (ProductRowItem?.Imagen != null && !string.IsNullOrEmpty(ProductRowItem.ImageExtension))
        {
            return $"data:image/{ProductRowItem.ImageExtension.Trim('.')};base64,{Convert.ToBase64String(ProductRowItem.Imagen)}";
        }
        else
        {
            return null;
        }
    }

    public async Task FileUploaded(InputFileChangeEventArgs e)
    {
        var browserFile = e.File;

        try
        {

            if (browserFile != null)
            {
                using (var memoryStream = new MemoryStream())
                {
                    var fileStream = browserFile.OpenReadStream(MAX_FILESIZE);
                    await fileStream.CopyToAsync(memoryStream);
                    imageData = memoryStream.ToArray();
                    FileType = Path.GetExtension(browserFile.Name);
                }
                GetPreviewImage();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }


    private async Task Update()
    {
        ProductRowItem.ImageExtension = FileType;
        ProductRowItem.Imagen = imageData;
        var editData = new EditProductData
            {
                Producto = ProductRowItem,
                Id = ProductRowItem.IdProducto,
                SubastaId = 1,
            };

        await OnEdit.InvokeAsync(editData);
        isEditMode = false;
    }

    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task SaveChanges(OfertaViewModel oferta)
    {
        var newOferta = new OfertaAPI
            {
                Monto = oferta.Monto,
                Fecha = DateTime.Now

            };
        await apiClient.AddOferta(newOferta, IdUsuario, ProductRowItem.IdProducto);
        HasMadeOferta = await CheckOfertas();
        CloseModal();
        await UpdateProduct.InvokeAsync();
    }

    private async Task<bool> CheckOfertas()
    {
        return await apiClient.CheckIfOferta(ProductRowItem.IdProducto, ProductRowItem.IdUsuario);
    }
}
