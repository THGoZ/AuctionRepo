@using APIService.Models
@using APIService
@using AuctionBlazorWebApp.Models.Helper
@using AuctionBlazorWebApp.Models.ViewModels
@inject APIService apiClient
@inject IJSRuntime JS


@if (ProductRowItem is not null)
{ 
    @if (!ShowUserProducts)
    {
        <div class="col-md-3 gap-5 mb-3 mt-3 container-lg">
            <div class="col shadow-lg rounded-top-3">
            <div class="card-sl">
                <div class="image-container">
                    <div class="first">
                        <div class="d-flex justify-content-end align-items-end">
                                <span class="wishlist text-light pull-right" disabled data-bs-toggle="tooltip" data-bs-placement="top" data-bs-original-title="Cantida de ofertas">@ProductRowItem.CantidadDeOfertas</span>
                        </div>
                    </div>
                    @if (ProductRowItem.Imagen is not null)
                    {
                        <img src="@LoadImage()" class="img-fluid rounded-top-3 card-img-top img-fit" alt="Producto Image" />
                    }
                    else
                    {
                        <img src="https://www.svgrepo.com/show/508699/landscape-placeholder.svg" alt="Producto Image" />
                    }
                </div>
            </div>
            <div class="card-heading bg-body-secondary">
                @ProductRowItem.Nombre
            </div>
                <div class="card-text text-body-tertiary bg-body-secondary">
                @ProductRowItem.Descripcion
            </div>
                <div class="card-text text-success bg-body-secondary">
                    @ProductRowItem.PrecioBase.ToString("C")
            </div>
            </div>
            <div class="rounded-bottom-3 text-end bg-body-tertiary shadow">
                @if (!HasMadeOferta && IsSubastaOpen)
                {
                    <a class="card-button text-decoration-none fw-bold" @onclick="ShowModal">Ofertar</a>
                    <OfertaModal  IsVisible="@isModalVisible" Title="@ProductRowItem.Nombre" OnSave="SaveChanges" OnClose="CloseModal" Minimun="@ProductRowItem.PrecioBase">
                        <p class="text-body-secondary">La oferta debe ser mayor a <span class="text-success">$@ProductRowItem.PrecioBase</span> </p>
                    </OfertaModal>
                }
                else
                {

                    <a class="card-button text-decoration-none bg-warning-subtle text-body-tertiary" disabled data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-original-title="@(@IsSubastaOpen ? "Ya has ofertado" : "No se puede ofertar en subastas proximas")">No se puede ofertar</a>

                }
            </div>
        </div>
    }
}



@code {
    [Parameter]
    public ProductoAPI? ProductRowItem { get; set; }

    [Parameter]
    public EventCallback<EditProductData> OnEdit { get; set; }

    [Parameter]
    public EventCallback<int> OnDelete { get; set; }
    [Parameter]
    public EventCallback UpdateProduct{ get; set; }

    [Parameter]
    public bool ShowOnly { get; set; }

    [Parameter]
    public int IdUsuario { get; set; }

    [Parameter]
    public bool ShowUserProducts{ get; set; }

    private bool isEditMode = false;
    private bool isMakeOferta = false;
    private bool HasMadeOferta;
    private bool IsSubastaOpen;
    public string ErrorMessage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        HasMadeOferta = await CheckOfertas();
        IsSubastaOpen = await CheckIfSubastaOpen();
    }

    private string? LoadImage()//para cargar en lista
    {

        if (ProductRowItem?.Imagen != null && !string.IsNullOrEmpty(ProductRowItem.ImageExtension))
        {
            return $"data:image/{ProductRowItem.ImageExtension.Trim('.')};base64,{Convert.ToBase64String(ProductRowItem.Imagen)}";
        }
        else
        {
            return null;
        }
    }

    private bool isModalVisible = false;

    private void ShowModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private async Task SaveChanges(OfertaViewModel oferta)
    {
        var newOferta = new OfertaAPI
            {
                Monto = oferta.Monto,
                Fecha = DateTime.Now

            };
        await apiClient.AddOferta(newOferta, IdUsuario, ProductRowItem.IdProducto);
        HasMadeOferta = await CheckOfertas();
        IsSubastaOpen = await CheckIfSubastaOpen();
        CloseModal();
        await UpdateProduct.InvokeAsync();
    }

    private async Task<bool> CheckOfertas()
    {
        return await apiClient.CheckIfOferta(ProductRowItem.IdProducto, IdUsuario);
    }

    private async Task<bool> CheckIfSubastaOpen()
    {
        return await apiClient.CheckIfSubastaOpen((int)ProductRowItem.IdSubasta);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        await JS.InvokeVoidAsync("initializeTooltips");
    }
}
